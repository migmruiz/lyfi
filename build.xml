<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. -->
<project basedir="." default="build" name="lyfi">
	<property environment="env" />
	<property name="junit.output.dir" value="junit" />
	<property name="debuglevel" value="source,lines,vars" />
	<property name="target" value="1.7" />
	<property name="source" value="1.7" />
	<import file="build_jar.xml" />
	<!--<property name="ECLIPSE_HOME" value="${USER_HOME}/.local/opt/eclipse" />-->
	<property name="ECLIPSE_HOME" value="${eclipse.home}" />
	<path id="Maven Dependencies.libraryclasspath">
		<pathelement location="${MAVEN_LOCAL_REPO}/commons-cli/commons-cli/1.2/commons-cli-1.2.jar" />
		<pathelement location="${MAVEN_LOCAL_REPO}/org/apache/lucene/lucene-core/3.6.0/lucene-core-3.6.0.jar" />
		<pathelement location="${MAVEN_LOCAL_REPO}/org/jaudiotagger/2.0.3/jaudiotagger-2.0.3.jar" />
		<pathelement location="${MAVEN_LOCAL_REPO}/org/apache/httpcomponents/httpclient/4.2/httpclient-4.2.jar" />
		<pathelement location="${MAVEN_LOCAL_REPO}/org/apache/httpcomponents/httpcore/4.2/httpcore-4.2.jar" />
		<pathelement location="${MAVEN_LOCAL_REPO}/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar" />
		<pathelement location="${MAVEN_LOCAL_REPO}/commons-codec/commons-codec/1.6/commons-codec-1.6.jar" />
		<pathelement location="${MAVEN_LOCAL_REPO}/org/eclipse/swt/${swt.artifact}/3.7.2/${swt.artifact}-3.7.2.jar" />
		<pathelement location="${MAVEN_LOCAL_REPO}/junit/junit/4.10/junit-4.10.jar" />
		<pathelement location="${MAVEN_LOCAL_REPO}/org/hamcrest/hamcrest-core/1.1/hamcrest-core-1.1.jar" />
	</path>
	<path id="lyfi.classpath">
		<pathelement location="target/classes" />
		<pathelement location="target/test-classes" />
		<path refid="Maven Dependencies.libraryclasspath" />
		<pathelement location="lib/lyrics-0.0.2-SNAPSHOT.jar" />
	</path>
	<path id="run.LyricsFinderCommandLineUITest.classpath">
		<path refid="lyfi.classpath" />
		<path refid="Maven Dependencies.libraryclasspath" />
	</path>
	<path id="run.LyricsWebSearcherTest.classpath">
		<path refid="lyfi.classpath" />
		<path refid="Maven Dependencies.libraryclasspath" />
	</path>
	<path id="run.LyricsFinderCommandLineUI.classpath">
		<path refid="lyfi.classpath" />
		<path refid="Maven Dependencies.libraryclasspath" />
	</path>
	<path id="run.LyricsIndexFinderTest.classpath">
		<path refid="lyfi.classpath" />
		<path refid="Maven Dependencies.libraryclasspath" />
	</path>
	<path id="run.test.classpath">
		<path refid="lyfi.classpath" />
		<path refid="Maven Dependencies.libraryclasspath" />
	</path>
	<path id="run.LyricsFinderTest.classpath">
		<path refid="lyfi.classpath" />
		<path refid="Maven Dependencies.libraryclasspath" />
	</path>
	<path id="run.LyricsFinderSWT_UI.classpath">
		<path refid="lyfi.classpath" />
		<path refid="Maven Dependencies.libraryclasspath" />
	</path>
	<target name="init">
		<mkdir dir="target/classes" />
		<mkdir dir="target/test-classes" />
		<copy includeemptydirs="false" todir="target/classes">
			<fileset dir="src">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="target/test-classes">
			<fileset dir="test">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>
	<target name="clean">
		<delete dir="target/classes" />
		<delete dir="target/test-classes" />
		<delete file="export/lyfi_0-5.jar"/>
	</target>
	<target depends="clean" name="cleanall" />
	<target depends="build-subprojects,build-project,create_run_jar" name="build">
		<echo message="${ant.project.name}: ${ant.file}" />
	</target>
	<target name="build-subprojects" />
	<target depends="init" name="build-project">
		<echo message="${ant.project.name}: ${ant.file}" />
		<javac debug="true" debuglevel="${debuglevel}" destdir="target/classes" source="${source}" includeantruntime="false" target="${target}">
			<src path="src" />
			<classpath refid="lyfi.classpath" />
		</javac>
		<javac debug="true" debuglevel="${debuglevel}" destdir="target/test-classes" source="${source}" includeantruntime="false" target="${target}">
			<src path="test" />
			<classpath refid="lyfi.classpath" />
		</javac>
	</target>
	<target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects" />
	<target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
		<copy todir="${ant.library.dir}">
			<fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar" />
		</copy>
		<unzip dest="${ant.library.dir}">
			<patternset includes="jdtCompilerAdapter.jar" />
			<fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar" />
		</unzip>
	</target>
	<target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
		<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter" />
		<antcall target="build" />
	</target>
	<target name="LyricsFinderCommandLineUITest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="br.lyfi.ui.LyricsFinderCommandLineUITest" todir="${junit.output.dir}" />
			<classpath refid="run.LyricsFinderCommandLineUITest.classpath" />
		</junit>
	</target>
	<target name="LyricsWebSearcherTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="br.lyfi.preindexing.LyricsWebSearcherTest" todir="${junit.output.dir}" />
			<classpath refid="run.LyricsWebSearcherTest.classpath" />
		</junit>
	</target>
	<target name="LyricsFinderCommandLineUI">
		<java classname="br.lyfi.ui.LyricsFinderCommandLineUI" failonerror="true" fork="yes">
			<classpath refid="run.LyricsFinderCommandLineUI.classpath" />
		</java>
	</target>
	<target name="LyricsIndexFinderTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="br.lyfi.postindexing.LyricsIndexFinderTest" todir="${junit.output.dir}" />
			<classpath refid="run.LyricsIndexFinderTest.classpath" />
		</junit>
	</target>
	<target name="test">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="br.lyfi.LyricsFinderTest" todir="${junit.output.dir}" />
			<test name="br.lyfi.postindexing.LyricsIndexFinderTest" todir="${junit.output.dir}" />
			<test name="br.lyfi.preindexing.LyricsWebSearcherTest" todir="${junit.output.dir}" />
			<test name="br.lyfi.ui.LyricsFinderCommandLineUITest" todir="${junit.output.dir}" />
			<classpath refid="run.test.classpath" />
		</junit>
	</target>
	<target name="LyricsFinderTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="br.lyfi.LyricsFinderTest" todir="${junit.output.dir}" />
			<classpath refid="run.LyricsFinderTest.classpath" />
		</junit>
	</target>
	<target name="LyricsFinderSWT_UI">
		<java classname="br.lyfi.ui.LyricsFinderSWT_UI" failonerror="true" fork="yes">
			<classpath refid="run.LyricsFinderSWT_UI.classpath" />
		</java>
	</target>
	<target name="junitreport">
		<junitreport todir="${junit.output.dir}">
			<fileset dir="${junit.output.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.output.dir}" />
		</junitreport>
	</target>
</project>
